#!/bin/bash
#
# Shell script for packer's shell provisioner.

# TODO(cavcrosby): eventually remove this file, due to shellfuncs project no longer being supported.

sleep 30

echo "!!! Start of provisioner script !!!"

# constants
PROGRAM_NAME="$(basename "$0")"
NETWORK_DEV_PATH="/sys/class/net"
GITHUB_USER_NAME="cavcrosby"
SHUNIT_PROGRAM_NAME="shunit2"
SHUNIT_GIT_REPO_URL="https://github.com/kward/shunit2"

# Can add more types of NICs as needed, the globs may change depending on
# naming scheme used for NICs. For reference see:
# https://www.freedesktop.org/software/systemd/man/systemd.net-naming-scheme.html
LOOPBACK_INTERFACE_GLOB="loopback_interface_glob"
ETHERNET_INTERFACE_GLOB="ethernet_interface_glob"
loopback_interfaces_counter=0
ethernet_interfaces_counter=0
declare -A NIC_GLOBS=(
    ["${LOOPBACK_INTERFACE_GLOB}"]="lo*"
    ["${ETHERNET_INTERFACE_GLOB}"]="en*"
)

# libgl1-mesa-glx needed running shellfuncs_install_tortoisehg. For reference:
# https://stackoverflow.com/questions/55313610/importerror-libgl-so-1-cannot-open-shared-object-file-no-such-file-or-directo
SYSTEM_DEPENDENCIES=(
    build-essential
    curl
    git
    gnupg
    libgl1-mesa-glx
    python3
    sudo
    wget
)

# exported vars
export GIT_REPOS_PATH="${HOME}/git"
export SHELL_DOTFILE_NAME=".profile"
# y ==> yes
export SHELLFUNCS_AUTOMATED_INSTALL="y"

ssh_dir_path="${HOME}/.ssh"
# ...-temp needed assuming 'repo_name = program_name'
shunit_repo_name="$(basename "${SHUNIT_GIT_REPO_URL}")-temp"
jenkins_infrastructure_repo_url="https://${GITHUB_USER_NAME}:${GITHUB_SECRET}@github.com/${GITHUB_USER_NAME}/jenkins-infrastructure.git"
jenkins_infrastructure_repo_name="$(basename "${jenkins_infrastructure_repo_url}")"

# Currently, this is set because of writing to '/etc/network/interfaces'
# and for writing a sudoer rule for the SSH_USER. The password caching for
# 15 minutes should be sufficient.
echo "${SSH_PASSWORD}" | sudo --validate --stdin;
echo "${SSH_USER} ALL=(ALL:ALL) NOPASSWD: ALL" | sudo --preserve-env tee "/etc/sudoers.d/${SSH_USER}"

# Sets git client information so shellfuncs can perform 'git pulls' when
# the shell reads the appropriate shell startup file.
git config --global user.email "conner@cavcrosby.tech"
git config --global user.name "Conner Crosby"

# normal VM updating, upgrading distro pkgs
sudo apt-get update
sudo apt-get dist-upgrade --assume-yes

# installs some 'nice to have' pkgs
sudo apt-get install "${SYSTEM_DEPENDENCIES[@]}" --assume-yes
sudo usermod --append --groups sudo "${SSH_USER}"

# Setup and install shellfuncs repo, also appending GIT_REPOS_PATH to appropriate
# shell startup file for shellfuncs job to use later.
mkdir "${GIT_REPOS_PATH}"
curl --silent https://raw.githubusercontent.com/cavcrosby/shellfuncs/main/install | bash
{ 
    echo ""
    cat << _EOF_
# added by ${PROGRAM_NAME}
export GIT_REPOS_PATH="${GIT_REPOS_PATH}"
_EOF_
} >> "${HOME}/${SHELL_DOTFILE_NAME}"

# shellcheck disable=1090
. "${HOME}/${SHELL_DOTFILE_NAME}"

# grab shunit2 which is used as part of the shellfuncs test suite
git clone --quiet "${SHUNIT_GIT_REPO_URL}" "${shunit_repo_name}"
# assumes the 'shunit2' script is located at repo root
cp "${shunit_repo_name}/${SHUNIT_PROGRAM_NAME}" "${SHELLFUNCS_TEST_SCRIPTS_PATH}"
rm --recursive --force "${shunit_repo_name}"

# grab common shell provisioner configurations
wget --output-document "${SHELL_PROVISIONERS_CONFIG_FILE}" "http://${PACKER_HTTP_ADDR}/${SHELL_PROVISIONERS_CONFIG_FILE}"
# shellcheck disable=1090
. "${PWD}/${SHELL_PROVISIONERS_CONFIG_FILE}"

hostonlyif_macaddr="${!SHELLFUNCS_HOSTONLYIF_MACADDR_ENV_VAR_NAME}"
natif_macaddr="${!SHELLFUNCS_NATIF_MACADDR_ENV_VAR_NAME}"

# Extract authorized_keys for 'jenkins' user (runner of Jenkins builds),
# also assumes jenkins_infrastructure_repo_name dir is in HOME.
git clone "${jenkins_infrastructure_repo_url}" "${jenkins_infrastructure_repo_name}"
if ! [ -d "${ssh_dir_path}" ]; then mkdir --parents "${ssh_dir_path}"; chmod 700 "${ssh_dir_path}"; fi
cat "${jenkins_infrastructure_repo_name}/configs/authorized_keys" >> "${ssh_dir_path}/authorized_keys"

# Config sshd by, first sed makes backup of original sshd_config (sshd_config.bak),
# then sed 's/old_text/new_text/' ... (the three '/'s can be replaced with
# any char, just a delimiter).
sudo sed --in-place=.bak --regexp-extended 's|^#?PubkeyAuthentication.+|PubkeyAuthentication yes|' /etc/ssh/sshd_config
sudo sed --in-place --regexp-extended 's|^#?PasswordAuthentication.+|PasswordAuthentication no|' /etc/ssh/sshd_config
sudo sed --in-place --regexp-extended 's|^#?AuthorizedKeysFile.+|AuthorizedKeysFile    .ssh/authorized_keys|' /etc/ssh/sshd_config
sudo systemctl restart sshd

# : shellcheck did not like my initial implementation when using a for
# loop with find, for reference:
# https://github.com/koalaman/shellcheck/wiki/SC2044
while IFS= read -r nic
do
    # we do want to match on globbing rather than the literal str
    # shellcheck disable=2254
    case "${nic}" in
        ${NIC_GLOBS["${LOOPBACK_INTERFACE_GLOB}"]})   _=$(( loopback_interfaces_counter++ ))
                                                    LOOPBACK_NAME="${nic}"
                                                    ;;
        ${NIC_GLOBS["${ETHERNET_INTERFACE_GLOB}"]})   _=$(( ethernet_interfaces_counter++ ))
                                                    if [ "$(tr --delete < "${NETWORK_DEV_PATH}"/"${nic}"/address ':' | tr '[:lower:]' '[:upper:]')" = "${hostonlyif_macaddr}" ]; then
                                                        HOSTONLYIF_NAME="${nic}"
                                                    elif [ "$(tr --delete < "${NETWORK_DEV_PATH}"/"${nic}"/address ':' | tr '[:lower:]' '[:upper:]')" = "${natif_macaddr}" ]; then
                                                        NATIF_NAME="${nic}"
                                                    else
                                                        echo "${PROGRAM_NAME}: unexpected ethernet interface was found"
                                                        exit 1
                                                    fi
                                                    ;;
    esac
done < <(find ${NETWORK_DEV_PATH} -exec basename '{}' ';')

if [ "${loopback_interfaces_counter}" -lt 1 ]; then
    echo "${PROGRAM_NAME}: VM does not have a loopback interface...huh?!?"
    exit 1
fi

if [ "${ethernet_interfaces_counter}" -lt 2 ]; then
    echo "${PROGRAM_NAME}: VM was not configured to have two ethernet interfaces"
    exit 1
fi

# Quoting not needed in heredoc for env vars. Also, ok with
# writing to interface file vs creating a new file in interfaces.d
cat << _EOF_ | sudo --preserve-env tee --append "/etc/network/interfaces"
auto ${LOOPBACK_NAME} ${NATIF_NAME} ${HOSTONLYIF_NAME}

iface ${LOOPBACK_NAME} inet loopback
iface ${LOOPBACK_NAME} inet6 loopback

iface ${NATIF_NAME} inet dhcp

iface ${HOSTONLYIF_NAME} inet static
    address ${SHELLFUNCS_VM_IPV4_ADDR}
    netmask ${SHELLFUNCS_VM_SUBNET_MASK}
    gateway ${SHELLFUNCS_VM_GATEWAY}

_EOF_

# for good practice, disable root account, credits go to:
# https://unix.stackexchange.com/questions/383301/should-i-disable-the-root-account-on-my-debian-pc-for-security
sudo passwd --delete root
sudo passwd --lock root

# packerbuilds.conf MAY contain env vars from build env
wget "http://${PACKER_HTTP_ADDR}/packerbuilds.conf"
echo "${SSH_PASSWORD}" | sudo --stdin mv "${PWD}/packerbuilds.conf" "/etc/"

echo "!!! End of provisioner script !!!"

exit 0
